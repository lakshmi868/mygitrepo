Virtualization
===================
This is the process of running multiple OS's parallelly on
a single pice of h/w.
Here we have h/w(bare metal) on top of which we have host os
and on the host os we install an application called as hypervisor
On the hypervisor we can run any no of OS's as guest OS

The disadvantage of this approach is these application running on the
guest OS have to pass through n number of lavers to access the H/W
resources.

Containarization
======================
Here we have bare metal on top of whcih we install the host Os
and on the hsot OS we install an application called as Docker Engine
On the docker engine we can run any application in the form of containers
Docker is a technology for creating thse containers

Docker achive what is commonly called as "process isolation"
ie all the applications(processes) have some dependency on a specific
OS.This dependency is removed by docker and we can run them on any
OS as containers if we have Docker engine installed

These containers pass through less no of layers to access the h/w resources
also organizations need not spend money on purchasing licenses of different
OS's to maintian various applications

Docker can be used at the the stages of S/W development life cycle
Build---->Ship--->Run

===========================================================================
Docker comes in 2 flavours
Docker CE (Community Edition)
Docker EE (Enterprise Edition)
Setup of Docker on Windows 
==============================
1 Download docker desktop from
  https://www.docker.com/products/docker-desktop

2 Install it

3 Once docker is installed we can use Power shell
  to run the docker commands

===============================================================================
Day 2
===============================================================
Setup of Docker on an Ubuntu Linux Machine
=================================================
1 Create an Ubuntu linux instances on AWS cloud

2 Connect to that instance using gitbash

3 To install docker
  a) Open https://get.docker.com and Copy paste the below two commands
     curl -fsSL https://get.docker.com -o get-docker.sh
     sh get-docker.sh

======================================================================
Docker Components
=======================
Images and Containers
===========================
A Docker image is a combination of bins/libs that are necessary for a
s/w application to work
A Docker container is a running instance of a docker image.Any number of
containers can be created from one docker images


Docker Client:This is the CLI of docker where the user can execute the
docker commands,The docker client accepts these commands and passes them
to a background process called "docker deamon"

Docker deamon: This process accepts the commands coming from the docker client
and routes them to work on docker images or containers or the docker registry

Docker registry: This is the cloud site of docker where docker images are
stored.This is of two types
1 Public Registry( hub.docker.com)
2 Private Registry(Setup on one of our local servers)

===========================================================================
Important docker commands
==============================
Working on docker images
===============================
1 To pull a docker image
  docker pull image_name

2 To search for a docker images
  docker search image_name

3 To upload an image into docker hub
  docker push image_name

4 To see the list of images that are downloaded
  docker images
  or
  docker image ls

5 To get detailed info about a docker image
  docker image inspect image_name/image_id

6 To delete a docker image that is not linked to any container
  docker rmi image_name/image_id

7 To delete a image that is linked to a container
  docker rmi -f image_name/image_id

8 To save the docker image as a tar file
  docker save image_name > tarfilename

9 To untar this tar file and get  image
  docker load tarfile_name

10 To delete all image
   docker system prune -af

11 To create an image from a container
   docker commit container_name/container_id image_name

12 To create a container from a dockerfile
   docker build -t image_name .


=============================================================================
13 To see the list of running containers
   docker container ls 

14 To see all the containers (running and stopped)
   docker ps -a

15 To stop a running container
   docker stop container_name/container_id

16 To start a stoped container
   docker start container_name/container_id

17 To delete a stopped container
   docker rm container_name/container_id

18 To delete a running container
   docker rm -f container_name/container_id

19 To restart container
   docker restart container_name/container_id

20 To stop all the running container
   docker stop $(docker ps -aq)

21 To delete all stopped containers
   docker rm $(docker ps -aq)

22 To delete all containers (running and stopped) 
   docker rm -f $(docker ps -aq)

23 To see the logs generated by a container
   docker logs container_name/container_id

24 To see the ports used by a container
   docker port container_name/container_id

25 To create a container
   docker run image_name/image_id
   run command options
   ===========================
   --name: This is used to give a name to the container
   -d : Used to run the container in detached mode(ie it runs in the background)
   -it: Used to open interactive terminal in the container
   -e : Used to pass environment varibales to the container
   -v : Used to attach an external directory or device as a volume
   --volumes-from: Used to share the vailumes between multiple containers  
   -p : Used for port mapping This will map the container port with the host
        port Eg: -p 8080:80 Here 80 is the container port (internal port) and
        8080 is the host port(external port)
   -P : Used for automatic port mapping where the container port will be mapped
        with a host port that is greater than 30000
   --restart: This will restart the container whenver the host machine restart
   --rm: Used to delete a container on exit form the container
   --link : Used to create a micro services architecture where multiple containers
            are linked with each other
   --network: USed to start a container on a specific docker network
   -m : Used to specify the max amout of memory that a container can use
   -c: Used to specify the max percentage of cpu that a container can use

26 To rename a container
   docker container rename container_name/container_id new_container_name

27 To run any process in a container from outside the container
   docker exec -it container_id/container_name process_name
   Eg: To run the bash process in a container
   docker exec -it container_id/container_name bash

28 To come out of a container without exit
   ctrl+p,ctrl+q

29  To go back into a container from where the interactive terminal is running
    docker attach container_id/container_name

30  To see the processes runnign in a container
    docker container container_id/container_name top

Working on docker networks
===============================
31 To see the list of docker networks
   docker network ls

32 To create a docker network
   docker network create --driver network_type network_name

33 To get detailed info about a network
   docker network insepct network_name/network_id

34 To delete a docker network
   docker network rm network_name/network_id

35 To connect a running container to a network
   docker netowork connect network_name/network_id container_name/container_id

36 To disconnect a running container to a network
   docker netowork disconnect network_name/network_id container_name/container_id

Working on docker volumes
============================
37 To see the list of docker  volumes
   docker volume ls

38 To create a docker volume
   docker volume create volume_name

39 To get detailed info about a volume
   docker volume inspect volume_name/volume_id

40 To delete a volume
   docker volume rm volume_name/volume_id

======================================================================
Day 3
====================================================================
UseCase 1
===============
Create an nginx container in detached mode
docker run --name webserver -p 8888:80 -d nginx

To check if the nginx contianer is running
docker container ls

To access the nginx from browser
public_ip_dockerhost:8888
============================================================================
UseCase 
=================
Create a tomcat container and name it appserver
docker run --name appserver -p 9090:8080 -d tomee

To access tomcat from browser
Public_ip_of_dockerhost:9090

=============================================================================
UseCase
================
Create a httpd container in detached mode and do automatic port mapping
docker run --name myhttpd -P -d httpd

To check the ports 
docker port container_name/container_id

To access from browser
public_ip_of_dockerhost:portno_from_above_command

=============================================================================
UseCase 
===================
Create jenkins container and do automtic port mapping
docker run  --name jenkins -d -p 9090:8080 jenkins

To see the ports used by jenkins
docker port jenkins

To access the jenkins from browser
public_ip_of_dockerhost:port_no_from_previous_step



=============================================================
UseCase 
Start centos as a container and launch interactive terminal on it
docker run --name c1 -it centos
exit
============================================================

Usecase 
Create an ubuntu container and launch interactive terminal in it
docker run --name u1 -it ubuntu
exit

==============================================================================
UseCase 
===================================

Create a mysql container and go into its bash shell
Login as mysql root user and create few tables.

1 Create a mysql container
  docker run --name db -d -e MYSQL_ROOT_PASSWORD=intelliqit mysql:5

2 To open interactive bash shell in the container
  docker exec -it db bash

3 To login into the db as root user
  myssql -u root -p
  Enter password "intelliqit"

4 To see the list of availble databases
  show databases;

5 To move into any of the above database
  use db_name;
  Eg: use sys;

6 To create emp and dept tables here
  Open https://justinsomnia.org/2009/04/the-emp-and-dept-tables-for-mysql/
  Copy the code from emp and dept tables and paste in the myswl container

7 To check if the emp and dept tables are created
  select * from emp;
  select * from dept;
============================================================================
Day 4
============================================================================
Creating a multi container architecture(microservices architecture)
=====================================================================
Various types of development and testing environments can be
created using docker in the following ways

1  --link  option (depricated)
2  docker-compose
3 Docker networking

4 Python Scripts
5 Ansible

--link Option: This is a docker run command option and it is
depricated.

UseCase 1
=============
Create 2 busybox containers and link them

1 Create a busybox container
  docke run  --name c1 -it busybox

2 To come out of the container without exit
  ctrl+p,ctrl+q

3 Create another busybox container and link it with the c1 container
  docker run  --name c2 --link c1:mybusybox -it busybox

4 Check if c2 can ping to c1
  ping c1


UseCase 2
=====================
Create a mysql container and a wordpress container and
link them

1 Create mysql:5 as a container
  docker run  --name mydb -d -e MYSQL_ROOT_PASSWORD=intelliqit mysql:5

2 Create a wordpress container and link it with a mysql container
  docker run --name mywordpress -d  -p 8080:80 --link mydb:mysql wordpress

3 To check if wordpress is linked with mysql container
  docker inspect mywordpress
  Search for "Links" section

4 To acces the wordpress from browser
  public_ip_of_dockerhost:8080



UseCase 3
================
Create a jenkins container and link with 2 tomcat containers
one for QAserver and another for prodserver

1 Create a jenkins container
  docker run  --name myjenkins -d -p 5050:8080 jenkins/jenkins

2 To access jenkins from browser
  public_ip_of_dockerhost:5050

3 Create a tomcat container as qaserver and link with jenkins
  docker run --name qaserver -d -p 6060:8080 --link myjenkins:jenkins tomee

4 Create another tomcat container as prodserver and link with jenkins
  docker run --name prodserver -d -p 7070:8080 --link myjenkins:jenkins tomee

5 To access tomcat
  public_ip_dockerhost:6060 or 7070
===============================================================================
Day 5
===============================================================================
